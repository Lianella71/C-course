// ========ДВУМЕРНЫЕ (МНОГОМЕРНЫЕ) МАССИВЫ И РЕКУРСИЯ============

// Двумерные (многомерные) массивы задаются: 

string[,] table /*наименование*/ = new string[2, 5]; // Запятая в [,] это показатель двухмерности: 2 строки и 5 столбцы
// String.Empty 
// table [0, 0]  table [0, 1]  table [0, 2] table [0, 4]
// table [0, 1]
// отсчет индексов меняются от 0

// table /*имя массива*/ [1, 2] /* №строки и №столбца*/ = "Слово"; /* можно работать как с обычной переменной
/*
for (int rows = 0; rows < 2; rows++)
{
    for (int columns = 0; columns < 5; columns++)
    {
        Console.WriteLine ($"-{table[rows, columns]}-");
    }
}
*/
/*
int[,] matrix = new int[3, 4];

for (int i = 0; i < 3; i++) // Вместо rows и columns можно использовать i и j
{
    for (int j = 0; j < 4; j++)
    {
        Console.Write($"{matrix[i, j]} ");
    }
Console.WriteLine();
}
*/
// Второй вариант, можно вместо присвоения i и j цифр ввести оператора. 
// Результат на выводе будет точно такой же
/*
int[,] matrix = new int[3, 4];

for (int i = 0; i < matrix.GetLength(0); i++) 
{
    for (int j = 0; j < matrix.GetLength(1); j++)
    {
        Console.Write($"{matrix[i, j]} ");
    }
Console.WriteLine();
}
*/
// == Создадим двумерную матрицу и заполним ее числами ==
/*
void PrintArray(int [,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++) 
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            Console.Write($"{matr[i, j]} ");
        }
    Console.WriteLine();
    }
}

void FillArray(int [,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            matr [i, j] = new Random().Next(1, 10);
        }
    }
}

int[,] matrix = new int[3, 4];
PrintArray(matrix);
Console.WriteLine("********|");
FillArray(matrix);
PrintArray(matrix);
*/
// == РИСУЕМ ИЗОБРАЖЕНИЕ РУКИ И ЗАКРЫШИВАЕМ==
/* int[,] pic = new int [23, 25];
   0 - закрашенный пиксель
   1 - не закрашенный пиксель
Как закрасить область? */
/*
int[,] pic = new int [,]
{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0},
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0},
    {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};
void PrintImage(int [,] image)
{
    for (int i = 0; i < image.GetLength(0); i++) 
    {
        for (int j = 0; j < image.GetLength(1); j++)
        {
           // Console.Write($"{image[i, j]} ");
           if (image[i, j] == 0) Console.Write($" ");
           else Console.Write($"+");
        }
    Console.WriteLine();
    }
}
void FillImage(int row, int col)
{
    if (pic [row, col] == 0)
    {
        pic [row, col] = 1;
        FillImage(row - 1, col); 
        FillImage(row, col - 1);
        FillImage(row + 1, col);
        FillImage(row, col + 1);
    }
}
PrintImage(pic);
FillImage(13, 13);
PrintImage(pic);
*/
//-----------------------------------------------------------------------------------------
// РЕКУРСИЯ. Функция которая вызывает сама себя

// == Задача==
/* Написать фунцию (метод) которая будут принимать число
факториал которого надо будет вычислить*/
/*
double Factorial (int n)
{
    // 1! = 1
    // 0! = 1
    if (n == 1) return 1;
    else return n * Factorial(n - 1);
}
for (int i = 1; i < 40; i++)
{
    Console.WriteLine($"{i}! = {Factorial(i)}");
}
*/
// Начиная с 17! пошли минусовые значения, это проблема переполнения. 
// Убираем ее с помощью замены типа int на тип double
//-------------------------------------------------------
// == ЗАДАЧА===
// Функция которая выводит числа Фибоначчи
// f(1) = 1
// f(2) = 1
// f(n) = f(n-1)+f(n-1)
/*
int Fibonacci(int n)
{
    if (n == 1 || n == 2) return 1;
    else return Fibonacci (n-1) + Fibonacci (n-2);
}

for (int i = 1; i < 10; i++)
{
    Console.WriteLine(Fibonacci(i));
}
*/
// Заменим int на double
/*
double Fibonacci(int n)
{
    if (n == 1 || n == 2) return 1;
    else return Fibonacci (n-1) + Fibonacci (n-2);
}

for (int i = 1; i < 50; i++)
{
    Console.WriteLine($"f({i}) = {Fibonacci(i)}");
}
После 40 символа программа начинает жутко тормозить
*/