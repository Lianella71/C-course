/* МЕТОДЫ: 
МЕТОД 1. Ничего не принимают и ничего не возвращают.
*/
/*
void Method1() // Содержат слово void и пустые скобки
{
    Console.WriteLine("Автор ..."); // тело метода, что-то могут вывести на экран. Например можно подписать авторство в конце программы
}
// Вызов метода:
// Нужно указать имя метода и (). 
Method1();
*/
//--------------------------------------------------------------------------------------------------
// МЕТОД 2. Ничего не возвращают, но могут принимать каки-то аргументы
/*
void Method2(string msg)
{
    Console.WriteLine(msg); // В теле можем указывать какие-то операторы и использовать те аргументы которые были приняты
}
//Method2("Текст сообщения"); // Вызов метода: Имя метода и в скобках вводим нужный текст сообщения
*/
/*
void Method21(string msg, int count) // введены аргументы
{
   int i = 0; // заданные условия
   while (i < count)
   {
    Console.WriteLine(msg); // тело метода
    i++; // счетчик +1
   }
}
//Method21("Текст сообщения", 4); // Просим программу показать текст сообщения 4 раза
Method21(msg:"Текст сообщения", count: 4); // Можно явно указать какому аргументу какую конструкцию мы хотим присвоить. Их не обязательно писать по порядку
*/
//------------------------------------------------------------------------------------------------------
// МЕТОД 3. Что-то возвращают, но ничего не принимают
// Если метод что-то возвращает, то мы должны обязательно указать тип данных которые мы возвращаем
/*
int Method3() // не принимает никакие аргументы, скобки пустые
{
    return DateTime.Now.Year; // Используем оператор return
}
int year = Method3(); // через оператор переменной присваиваем нужное значение
Console.WriteLine(year); 
*/
//------------------------------------------------------------------------------------------------------
// МЕТОД 4. Что-то принимают и что-то возвращают.
/*
string Method4(int count, string text) //Возвращать будем строку с аргументами
{
    int i = 0;
    string result = string.Empty; //вводим переменную в которую будем помещать значение. Задаем что пока это пустая строка
    while(i < count) //Используем цикл
    {
        result = result + text;
        i++;
    }
    return result;
}   
string res = Method4(10, "asdf");
Console.WriteLine(res);
*/
//-------------------------------------------------------------------------------------------------------
// ЦИКЛ for. Цикл синтаксически собирает в себе все в кучу. 
/*
string Method4(int count, string text) //Возвращать будем строку с аргументами
{
    string result = string.Empty; //вводим переменную в которую будем помещать значение. Задаем что пока это пустая строка
    for (int i = 0; i < count; i++) // Собираем все условия в скобках
    {
        result = result + text;
    }
    return result;
}   
string res = Method4(10, "z");
Console.WriteLine(res);
*/
//---------------------------------------------------------------------------------------------------------
// Можно цикл использовать внутри цикла.
// Выведем таблицу умножения на экран
// У нас есть цикл for
/*
for (int i = 2; i <= 10; i++)
{
    for (int j = 2; j <= 10; j++)
    {
        Console.WriteLine($"{i} * {j} = {i * j}");
    }
    Console.WriteLine("*********************"); // переход на новую строку что бы разбить блоки таблицы
}
*/
//----------------------------------------------------------------------------------------------------------
// ==ПРАКТИЧЕСКИЕ ЗАДАНИЯ==

//====== ЗАДАЧА 1========
/* Дан текст. В тексте нужно все пробелы заменить черточками.
Маленькие буквы "к" заменить большими "К". а большие "С" заменить маленькими "с".
*/
/*
string text = "- Я думаю. - сказал князь, улыбаясь, - что, "
            + "ежели бы вас послали вместо нашего милого Винценгероде,"
            + "вы бы взяли приступом согласие прусского короля."
            + "Вы так красноречивы. Вы дадите мне чаю?";
// string s = "qwerty"
//             012
// s[3] // r

string Replace(string text, char oldValue, char newValue)
{
    string result = String.Empty;
    int length = text.Length;
    for (int i = 0; i < length; i++)
    {
        if (text [i] == oldValue) result = result + $"{newValue}";
        else result = result + $"{text [i]}";
    }

    return result;
}
string newText = Replace(text, ' ', '|');
Console.WriteLine(newText);
Console.WriteLine();
newText = Replace(newText, 'к', 'К');
Console.WriteLine(newText);
Console.WriteLine();
newText = Replace(newText, 'С', 'с');
Console.WriteLine(newText);
*/
//----------------------------------------------------------------------------------------------------
// =====Функции в программировании=====
// 1. Найти позицию минимального элемента в неотсортированной части массива
// 2. Произвести обмен этого значения со значением первой неотсортированной позиции
// 3. Повторить пока есть не отсортированные элементы
//------
// Заведем массив который будем отсортировывать
/*
int [] arr = {1, 5, 4, 3, 2, 6, 7, 1, 1};

void PrintArray(int[] array)
{
    int count = array.Length;
    for (int i = 0; i < count; i++)
    {
    Console.Write($"{array[i]} ");
    }
    Console.WriteLine();
}

void SelectionSort(int [] array)
{
    for (int i = 0; i < array.Length; i++)
    {
        int minPosition = i;
        for (int j = i + 1; j < array.Length; j++)
        {
            if(array[j] < array[minPosition]) minPosition = j;
        }

        int temporary = array[i];
        array[i] = array[minPosition];
        array[minPosition] = temporary;
    }
}

PrintArray(arr);
SelectionSort (arr);

PrintArray(arr);
*/


